
public class PartB
{
	Node root;
	class Node
	{
		int data;
		Node left;
		Node right;
		
		public Node()
		{
			data = 0;
		}
		
		public Node(int value)
		{
			data = value;
		}
	}
	
	static Node merge(Node u, Node v)
	{
		Node dummy;
		dummy = u;
		u = v;
		v = dummy;
		
		if (u.data > v.data)
		{
			dummy = u;
			u = v;
		    v = dummy;
		}
		
		if (u.right == null)
		{
			  u.right = v;
		}
	    else // Merge recursively
		      u.right = merge(u.right, v);
		// Conditionally swap children of u
	    if (u.left == null || u.right.npl > u.left.npl)
	    {
	      dummy = u.right; 
	      u.right = u.left;
	      u.left = dummy; 
	    }
	    // Update npl values
	    if (u.right == null)
	      u.npl = 0;
	    else
	      u.npl = min(u.left.npl, u.right.npl) + 1;
	}
	
	
	
	public void insert(int key)

	{

		if (root == null)

			root = new Node(key);

		else

			root = Node.merge(root, new Node(key));

	}

	public int deleteMin()
	  {
	    if (root == null)
	    {
	      System.out.println("EMPTY HEAP !!!");
	      return Integer.MAX_VALUE;
	    }
	    else
	    {
	      int x = root.key;
	      if (root.right == null) // Also covers case of single node
	        root = root.left;
	      else
	        root = Node.merge(root.left, root.right);
	      return x;
	    }

	  }
}